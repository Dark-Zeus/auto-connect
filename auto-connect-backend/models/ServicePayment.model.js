// models/ServicePayment.model.js
import mongoose from "mongoose";

const servicePaymentSchema = new mongoose.Schema(
  {
    // Unique payment ID (auto-generated by pre-save middleware)
    paymentId: {
      type: String,
      unique: true,
      required: false, // Will be auto-generated, so not required on creation
    },

    // Link to booking
    booking: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Booking",
      required: [true, "Booking reference is required"],
    },

    // Link to service report
    serviceReport: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "ServiceReport",
      required: [true, "Service report reference is required"],
    },

    // Customer (vehicle owner)
    customer: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: [true, "Customer reference is required"],
    },

    // Service center
    serviceCenter: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: [true, "Service center reference is required"],
    },

    // Payment amount
    amount: {
      type: Number,
      required: [true, "Payment amount is required"],
      min: [0, "Payment amount must be positive"],
    },

    // Currency
    currency: {
      type: String,
      default: "LKR",
      uppercase: true,
    },

    // Payment status
    paymentStatus: {
      type: String,
      enum: ["PENDING", "PROCESSING", "COMPLETED", "FAILED", "REFUNDED"],
      default: "PENDING",
    },

    // Payment method
    paymentMethod: {
      type: String,
      enum: ["STRIPE", "CASH", "BANK_TRANSFER", "OTHER"],
      default: "STRIPE",
    },

    // Stripe payment details
    stripeDetails: {
      sessionId: {
        type: String,
      },
      paymentIntentId: {
        type: String,
      },
      chargeId: {
        type: String,
      },
    },

    // Payment timestamps
    paymentInitiatedAt: {
      type: Date,
      default: Date.now,
    },
    paymentCompletedAt: {
      type: Date,
    },

    // Transaction reference (for receipts)
    transactionReference: {
      type: String,
    },

    // Payment metadata
    metadata: {
      bookingId: String,
      serviceReportId: String,
      vehicleRegistration: String,
      serviceCenterName: String,
    },

    // Receipt information
    receipt: {
      receiptNumber: String,
      receiptUrl: String,
      generatedAt: Date,
    },

    // Refund information (if applicable)
    refund: {
      refundId: String,
      refundAmount: Number,
      refundReason: String,
      refundedAt: Date,
      refundStatus: {
        type: String,
        enum: ["PENDING", "COMPLETED", "FAILED"],
      },
    },

    // Notes
    notes: {
      type: String,
      maxlength: [1000, "Notes cannot exceed 1000 characters"],
    },

    // Soft delete
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true,
    collection: "service_payments",
  }
);

// Indexes for performance
servicePaymentSchema.index({ paymentId: 1 });
servicePaymentSchema.index({ booking: 1 });
servicePaymentSchema.index({ serviceReport: 1 });
servicePaymentSchema.index({ customer: 1 });
servicePaymentSchema.index({ serviceCenter: 1 });
servicePaymentSchema.index({ paymentStatus: 1 });
servicePaymentSchema.index({ "stripeDetails.sessionId": 1 });
servicePaymentSchema.index({ createdAt: -1 });

// Compound indexes
servicePaymentSchema.index({ customer: 1, paymentStatus: 1 });
servicePaymentSchema.index({ serviceCenter: 1, paymentStatus: 1 });
servicePaymentSchema.index({ booking: 1, paymentStatus: 1 });

// Pre-save middleware to generate payment ID
servicePaymentSchema.pre("save", function (next) {
  if (this.isNew && !this.paymentId) {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substr(2, 5);
    this.paymentId = `PAY-${timestamp}-${random}`.toUpperCase();
  }
  next();
});

// Virtual for payment reference
servicePaymentSchema.virtual("paymentReference").get(function () {
  return `${this.paymentId} - ${this.amount} ${this.currency}`;
});

// Method to mark payment as completed
servicePaymentSchema.methods.markAsCompleted = async function (transactionDetails = {}) {
  this.paymentStatus = "COMPLETED";
  this.paymentCompletedAt = new Date();

  if (transactionDetails.paymentIntentId) {
    this.stripeDetails.paymentIntentId = transactionDetails.paymentIntentId;
  }
  if (transactionDetails.chargeId) {
    this.stripeDetails.chargeId = transactionDetails.chargeId;
  }
  if (transactionDetails.transactionReference) {
    this.transactionReference = transactionDetails.transactionReference;
  }

  await this.save();
  return this;
};

// Method to mark payment as failed
servicePaymentSchema.methods.markAsFailed = async function (reason = "") {
  this.paymentStatus = "FAILED";
  this.notes = this.notes ? `${this.notes}\nFailed: ${reason}` : `Failed: ${reason}`;
  await this.save();
  return this;
};

// Static method to get payments by customer
servicePaymentSchema.statics.findByCustomer = function (customerId, status = null) {
  const query = { customer: customerId, isActive: true };
  if (status) query.paymentStatus = status;
  return this.find(query).sort({ createdAt: -1 });
};

// Static method to get payments by service center
servicePaymentSchema.statics.findByServiceCenter = function (serviceCenterId, status = null) {
  const query = { serviceCenter: serviceCenterId, isActive: true };
  if (status) query.paymentStatus = status;
  return this.find(query).sort({ createdAt: -1 });
};

// Static method to find payment by booking
servicePaymentSchema.statics.findByBooking = function (bookingId) {
  return this.findOne({ booking: bookingId, isActive: true });
};

const ServicePayment = mongoose.models.ServicePayment || mongoose.model("ServicePayment", servicePaymentSchema);

export default ServicePayment;
